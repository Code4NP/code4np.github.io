{
  "hash": "07affc95913cccf1a931af05e3cd7a7b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Part 2: Anatomy of an mzML\"\nauthor:\n  - name: Chase M Clark\n    orcid: 0000-0001-6439-9397\n    roles: [original draft, review & editing]\ncategories: []\ndate: \"2024-01-02\"\ndescription: \"What mass spectrometry data looks like, using R\"\nexecute: \n  cache: true\nformat:\n  html:\n    df-print: paged\nfilters:\n  - collapse-callout\ncollapse-callout:\n  all: true  \n---\n\n\nThis is a continuation from [Part 1](../1_intro/).\n\n\n# The data (mzML)\n\nAs hinted by the name of its predecessor (mzXML), mzML is an [XML](https://en.wikipedia.org/wiki/XML) file, which is a highly-structured \"Markup Language\". The current specifications for mzML, as well as example files, can be found over at [https://www.psidev.info/mzml](https://www.psidev.info/mzml).\n\nTake a second and go look at an example mzML file over on HUPO-PSI's [GitHub repo](https://github.com/HUPO-PSI/mzML/blob/master/examples/tiny.msdata.mzML0.99.10.mzML). The main thing to notice is that it is highly structured and there's a lot of additional metadata contained in this file beyond m/z and intensity. This can be important for certain analysis (e.g. for MALDI, the metadata will contain sample location information).\n\nIf you happen to have experience with HTML code it's quite similar to XML. The important thing to note is there are \"tags\" that the denote the start and end of certain info and these can be nested within each other. For example:\n\n```{.python code-line-numbers=\"true\"}\n<dataProcessing id=\"Xcalibur Processing\" softwareRef=\"Xcalibur\"> # <1>\n    <processingMethod order=\"1\"> # <2>\n        <cvParam cvLabel=\"MS\" accession=\"MS:1000033\" name=\"deisotoping\" value=\"false\"/> # <3>\n        <cvParam cvLabel=\"MS\" accession=\"MS:1000034\" name=\"charge deconvolution\" value=\"false\"/> # <4>\n        <cvParam cvLabel=\"MS\" accession=\"MS:1000035\" name=\"peak picking\" value=\"true\"/> # <5>\n    </processingMethod> # <6>\n</dataProcessing> # <7>\n```\n\n1. Opens the `dataProcessing` tag and defines the properties of 'id' and 'softwareRef'; the last line `</dataProcessing>` closes the \"dataProcessing\" tag. \n2. Defines the `processingMethod` with the property `order=\"1\"`.\n3. Defines a `cvParam` tag which uses properties from the controlled mzML ontology to let us know no deisotoping was performed.\n4. Defines a `cvParam` tag which uses properties from the controlled mzML ontology to let us know no charge deconvolution was performed.\n5. Defines a `cvParam` tag which uses properties from the controlled mzML ontology to let us know peak peaking was performed.\n6. Closes the `processingMethod` tag.\n7. Closes the `dataProcessing` tag. \n\n\n\n\nUsually mzML files are indented which allows you to easily discern which tags are nested under which other tags; but there is technically no requirement that there be indentations.\n\nAnother thing you may have noticed is that there are no obvious m/z or intensity values in this mzML file. No table, comma separated numbers, nothin'. The mass spectra are actually encoded in the parts of the file like [lines 131-144](https://github.com/HUPO-PSI/mzML/blob/741ef7bce7adcf687271a718bd434ee6da0cb2e0/examples/tiny.msdata.mzML0.99.10.mzML#L131), as shown below.\n\n```{.python code-line-numbers=\"true\"}\n<binaryDataArrayList count=\"2\">  # <1>\n  <binaryDataArray arrayLength=\"10\" encodedLength=\"108\" dataProcessingRef=\"XcaliburProcessing\">  # <2>\n    <cvParam cvRef=\"MS\" accession=\"MS:1000523\" name=\"64-bit float\" value=\"\"/>  # <3>\n    <cvParam cvRef=\"MS\" accession=\"MS:1000576\" name=\"no compression\" value=\"\"/>  # <4>\n    <cvParam cvRef=\"MS\" accession=\"MS:1000514\" name=\"m/z array\" value=\"\"/>  # <5>\n    <binary>AAAAAAAAAAAAAAAAAADwPwAAAAAAAABAAAAAAAAACEAAAAAAAAAQQAAAAAAAABRAAAAAAAAAGEAAAAAAAAAcQAAAAAAAACBAAAAAAAAAIkA=</binary>  # <6>\n  </binaryDataArray>  # <7>\n  <binaryDataArray arrayLength=\"10\" encodedLength=\"108\" dataProcessingRef=\"XcaliburProcessing\">  # <8>\n    <cvParam cvRef=\"MS\" accession=\"MS:1000523\" name=\"64-bit float\" value=\"\"/>  # <8>\n    <cvParam cvRef=\"MS\" accession=\"MS:1000576\" name=\"no compression\" value=\"\"/> # <8>\n    <cvParam cvRef=\"MS\" accession=\"MS:1000515\" name=\"intensity array\" value=\"\"/>  # <8>\n    <binary>AAAAAAAAJEAAAAAAAAAiQAAAAAAAACBAAAAAAAAAHEAAAAAAAAAYQAAAAAAAABRAAAAAAAAAEEAAAAAAAAAIQAAAAAAAAABAAAAAAAAA8D8=</binary> # <8>\n  </binaryDataArray> # <8>\n</binaryDataArrayList> # <9>\n```\n\n1. This line informs us that there are two binary arrays within this tag/section.\n2. Open tag of a single data array (i.e. list). Has properties telling us array is a binary string 108 characters long, there will be 10 data points when decoded, and was created with Thermo's XcaliburProcessing software\n3. The data points will be [64-bit floating point numbers](64-bit floating point numbers) (i.e. numbers precise to ~16 decimals).\n4. The data is not compressed.\n5. This tag/section contains the m/z values for the spectrum.\n6. The binary data which will containt 10 m/z data points when decoded.\n7. End of the first data array\n8.  The second data array can be ready the same as the first, but contains the intensity value data points.\n9. Closes the binaryDataArrayList.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(e.g. [here](https://github.com/HUPO-PSI/mzML/blob/741ef7bce7adcf687271a718bd434ee6da0cb2e0/examples/tiny.msdata.mzML0.99.10.mzML#L136))\nIf we look at the lines just above and below these `<binary>` tags ([L132-137](https://github.com/HUPO-PSI/mzML/blob/741ef7bce7adcf687271a718bd434ee6da0cb2e0/examples/tiny.msdata.mzML0.99.10.mzML#L132C1-L137C31)) we notice they are enclosed within a `<binaryDataArray>` tag. This contains some informative metadata, that looks like `<cvParam cvRef=\"MS\" accession=\"MS:1000576\" name=\"no compression\" value=\"\"/>`. The accessions (`MS:1000576`) and name `\"no compression\"` are defined in a controlled vocabulary for mzML which can be found [here](https://raw.githubusercontent.com/HUPO-PSI/psi-ms-CV/master/psi-ms.obo). If we look at this single `<binaryDataArray>` tag, it contains metadata showing `64-bit float` ([64-bit precision number](https://en.wikipedia.org/wiki/Double-precision_floating-point_format)), `no compression` (data hasn't been compressed), and  `m/z array` (the binary tag contains m/z values). The intensity values are contained within a separate `<binaryDataArray>` which conatains the inner tag: `<cvParam cvRef=\"MS\" accession=\"MS:1000515\" name=\"intensity array\" value=\"\"/>`.\n\nIn short the m/z values are [here](https://github.com/HUPO-PSI/mzML/blob/741ef7bce7adcf687271a718bd434ee6da0cb2e0/examples/tiny.msdata.mzML0.99.10.mzML#L136). And the intensity values are [here](https://github.com/HUPO-PSI/mzML/blob/741ef7bce7adcf687271a718bd434ee6da0cb2e0/examples/tiny.msdata.mzML0.99.10.mzML#L142)\n\n\n\n# Analysis/Anatomy of a MS file\n\nI'm going to go through the analysis of LC-MS/MS data as that is one of the more common methods used in our field and the concepts are largely transferable to other types of MS data\n\n\n## Setup an ðŸ‡· session\n\nThe rest of this tutorial will take place [using R](https://bookdown.org/introrbook/intro2r/installing-r-and-rstudio.html#installing-rstudio). \n\nInstall and then load [mzR](https://bioconductor.org/packages/release/bioc/html/mzR.html), a Bioconductor package for parsing mass spectrometry data. Vignette [here](https://bioconductor.org/packages/release/bioc/vignettes/mzR/inst/doc/mzR.html). For plotting we'll use ggplot2 and plotly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"mzR\", quietly = TRUE)){\n  if (!require(\"BiocManager\", quietly = TRUE)){\n      install.packages(\"BiocManager\")\n  }\n  BiocManager::install(\"mzR\")\n}\nif (!require(\"ggplot2\", quietly = TRUE)){\n    install.packages(\"ggplot2\")\n}\nif (!require(\"plotly\", quietly = TRUE)){\n    install.packages(\"plotly\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'plotly'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mzR)\nlibrary(ggplot2)\nlibrary(plotly)\n```\n:::\n\n\n## Download LC-MS/MS example data\n\nNext let's download the LC-MS/MS data we will be working with to a temporary directory (will be deleted upon closing the R session). \n\nThere are two files: \n\n- an mzXML file which contains **centroid** data (peaks only)\n- an mzML file which contains **profile** data (raw data,not peak-picked)\n\n[GNPS](https://gnps.ucsd.edu/ProteoSAFe/static/gnps-splash.jsp) used to require mzXML so that's the reason for both mzXML and mzML formats.\n\n\nWarning: This is a 22 MB and 306 MB download.\n\n::: {.cell}\n\n```{.r .cell-code}\n# I have slow internet so I'll increase the amount of time the download is allowed to take\noptions(timeout=240)\n\ntemporary_directory <- tempdir()\n\n# 22.3 MB\npeaks_file_path <- file.path(temporary_directory, \"B022.mzXML\" )\ndownload.file(url = \"ftp://massive.ucsd.edu/v01/MSV000081555/peak/B022.mzXML\",\n              destfile = peaks_file_path)\n\n# 306.1 MB\nraw_mzml_path <- file.path(temporary_directory, \"B022.mzML\" )\ndownload.file(url = \"ftp://massive.ucsd.edu/v01/MSV000081555/raw/FullSpectra-mzML/B022_GenbankAccession-KY858245.mzML\",\n              destfile = raw_mzml_path)\n```\n:::\n\n\n### Is this what I expected?\n\nWe can use `mzR::openMSfile()` to open the file in R.\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_spectra_handle <- mzR::openMSfile(raw_mzml_path)\n```\n:::\n\n\nAnd with this we can access any single scan within the file (scan=an MS spectrum). Here we'll look at summary info for a random scan (scan 2243). While the column name \"peaksCount\" is seen here it should be noted that that column has that same name whether you have loaded centroid or profile data and is best thought of as the number of data points within the single scan/spectrum.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheader(full_spectra_handle)[2243, ]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"seqNum\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"acquisitionNum\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"msLevel\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"polarity\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"peaksCount\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"totIonCurrent\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"retentionTime\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakMZ\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakIntensity\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"collisionEnergy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ionisationEnergy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lowMZ\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"highMZ\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorScanNum\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorMZ\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorCharge\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorIntensity\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mergedScan\"],\"name\":[18],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultScanNum\"],\"name\":[19],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultStartScanNum\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultEndScanNum\"],\"name\":[21],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"injectionTime\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"filterString\"],\"name\":[23],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"spectrumId\"],\"name\":[24],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"centroided\"],\"name\":[25],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"ionMobilityDriftTime\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowTargetMZ\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowLowerOffset\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowUpperOffset\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowLowerLimit\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowUpperLimit\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2243\",\"2\":\"2243\",\"3\":\"2\",\"4\":\"1\",\"5\":\"974\",\"6\":\"431321.5\",\"7\":\"613.6829\",\"8\":\"201.1234\",\"9\":\"117984.9\",\"10\":\"25\",\"11\":\"0\",\"12\":\"51.15211\",\"13\":\"782.8459\",\"14\":\"2242\",\"15\":\"743.5622\",\"16\":\"1\",\"17\":\"741449.6\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"250\",\"23\":\"FTMS + p ESI d Full ms2 743.56@hcd25.00 [51.67-775.00]\",\"24\":\"controllerType=0 controllerNumber=1 scan=2243\",\"25\":\"FALSE\",\"26\":\"NA\",\"27\":\"743.5622\",\"28\":\"1\",\"29\":\"1\",\"30\":\"51.66667\",\"31\":\"775\",\"_rn_\":\"2243\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n### Reanalysis of strain B022, MS scan 2242 & 2243, C14 acyl-desferrioxamine\n\n2242 is the MS^1^ scan that contains the precursor for the MS^2^ scan \"2243\" which appeared in [Figure S6F](https://www.pnas.org/doi/full/10.1073/pnas.1801247115#supplementary-materials).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsingle_spectrum <- mzR::peaks(full_spectra_handle, scans=2242)\nsingle_spectrum <- as.data.frame(single_spectrum)\ncolnames(single_spectrum) <- c(\"mass\", \"intensity\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(single_spectrum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7076\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  single_spectrum,\n  type = \"l\",\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\nLet's zoom in on the ^13^C isotopic envelope of the \"743.5622 *m/z*\" precursor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = subset(single_spectrum, mass > 743 & mass < 750),\n  aes(\n    x = mass, \n    y = intensity\n  )\n) + \n  geom_line(color=\"gray48\") + \n  geom_point(size = 0.75, color=\"gray0\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nAnd zoom in further to the M+H ion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = subset(single_spectrum, mass > 743 & mass < 744),\n  aes(\n    x = mass, \n    y = intensity\n  )\n) + \n  geom_line(color=\"gray48\") + \n  geom_point(size = 0.75, color=\"gray0\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nAn important thing to take note of when doing most types of spectroscopy/spectrometry is the number of measurements across a peak. Here we are getting ~10 data points per ion/peak which is pretty good. The smaller the number of points, the worse your peak shape will be, the worse your accuracy and precision will be. Alternately, too many points can bloat your data size and sometimes make analyses more difficult. This is largely controlled by [dwell time](https://www.agilent.com/cs/library/posters/public/Agilent_ASMS_2019_WP444_Poster.pdf) and duty cycles in the MS acquisition settings. Instrument settings/chromatography may have to be optimized to balance sensitivity with getting enough data points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = subset(single_spectrum, mass > 743 & mass < 744),\n  aes(\n    x = mass, \n    y = intensity\n  )\n) + \n  geom_line(color=\"gray48\") + \n  geom_point(size = 0.75, color=\"gray0\") +\n  geom_point(data = subset(subset(single_spectrum, mass > 743 & mass < 744), intensity > 100),aes(\n    x = mass, \n    y = intensity\n  ),  size = 3, color=\"red\") \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nLet's create a extracted ion chromatogram (EIC) for the \"743.5622 *m/z*\" precursor.\n\nTo do that we need to loop through all the MS^1^ spectra\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_spectra_header <- header(full_spectra_handle)\nms1_indices <- full_spectra_header[full_spectra_header$msLevel == 1, ]$seqNum\n\ntarget_mass <- 743.5646\ndelta <- 0.01\n\nleft_window <- target_mass - delta\nright_window <- target_mass + delta\n\nz <- lapply(ms1_indices, \n  function(x){\n    ret_time <- full_spectra_header[x, ]$retentionTime\n    x <- mzR::spectra(full_spectra_handle, x)\n    x <- as.data.frame(x)\n    colnames(x) <- c(\"mass\", \"intensity\")\n    x <- x[x$mass > left_window & x$mass < right_window,  ]\n    if (nrow(x) > 0){\n      return(data.frame(list(ret_time=ret_time, intensity=mean(x$intensity))))\n    } else {\n      return(data.frame(list(ret_time=ret_time, intensity=0)))\n    }\n  }\n)\nz2 <- do.call(\"rbind\", z)\n```\n:::\n\n\nCorresponds to [Figure S5E](https://www.pnas.org/doi/full/10.1073/pnas.1801247115#supplementary-materials):\n\n::: {.cell}\n\n```{.r .cell-code}\ntitle = paste(\n  \"Extracted Ion Chromatogram: \",\n  target_mass,\n  \" \",\n  expression(italic(\"m/z\")),\n  \" +/- \",\n  delta,\n   \" Da\")\n\nggplot(\n  data = z2,\n  aes(\n    x = ret_time / 60,\n    y = intensity\n  )\n) + \n  geom_line(color=\"gray48\") +\n  xlab(\"Retention Time (min)\") +\n      ggtitle(bquote(\"Extracted Ion Chromatogram:\"~.(target_mass) ~italic(\"m/z\")~\"+/-\"~.(delta) ~\"Da\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nLet's highlight where the instrument fragmented parent ions between 743 *m/z* & 745 *m/z*?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = z2,\n  aes(\n    x = ret_time / 60,\n    y = intensity\n  )\n) + \n  geom_line(color=\"gray48\") + \n  geom_point(\n    data = subset(full_spectra_header, precursorMZ > 743 & precursorMZ < 745),\n    aes(x=retentionTime / 60, y= 5e5),\n    color=\"red\"\n    ) +\n  xlab(\"Retention Time (min)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset(full_spectra_header, precursorMZ > 743 & precursorMZ < 745)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"seqNum\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"acquisitionNum\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"msLevel\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"polarity\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"peaksCount\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"totIonCurrent\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"retentionTime\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakMZ\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakIntensity\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"collisionEnergy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ionisationEnergy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lowMZ\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"highMZ\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorScanNum\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorMZ\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorCharge\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorIntensity\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mergedScan\"],\"name\":[18],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultScanNum\"],\"name\":[19],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultStartScanNum\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultEndScanNum\"],\"name\":[21],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"injectionTime\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"filterString\"],\"name\":[23],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"spectrumId\"],\"name\":[24],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"centroided\"],\"name\":[25],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"ionMobilityDriftTime\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowTargetMZ\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowLowerOffset\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowUpperOffset\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowLowerLimit\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowUpperLimit\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2168\",\"2\":\"2168\",\"3\":\"2\",\"4\":\"1\",\"5\":\"676\",\"6\":\"239391.41\",\"7\":\"592.2953\",\"8\":\"201.1232\",\"9\":\"69356.03\",\"10\":\"25\",\"11\":\"0\",\"12\":\"51.15209\",\"13\":\"782.8460\",\"14\":\"2166\",\"15\":\"743.5629\",\"16\":\"1\",\"17\":\"462322.3\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"250\",\"23\":\"FTMS + p ESI d Full ms2 743.56@hcd25.00 [51.67-775.00]\",\"24\":\"controllerType=0 controllerNumber=1 scan=2168\",\"25\":\"FALSE\",\"26\":\"NA\",\"27\":\"743.5629\",\"28\":\"1\",\"29\":\"1\",\"30\":\"51.66667\",\"31\":\"775\",\"_rn_\":\"2168\"},{\"1\":\"2243\",\"2\":\"2243\",\"3\":\"2\",\"4\":\"1\",\"5\":\"974\",\"6\":\"431321.47\",\"7\":\"613.6829\",\"8\":\"201.1234\",\"9\":\"117984.93\",\"10\":\"25\",\"11\":\"0\",\"12\":\"51.15211\",\"13\":\"782.8459\",\"14\":\"2242\",\"15\":\"743.5622\",\"16\":\"1\",\"17\":\"741449.6\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"250\",\"23\":\"FTMS + p ESI d Full ms2 743.56@hcd25.00 [51.67-775.00]\",\"24\":\"controllerType=0 controllerNumber=1 scan=2243\",\"25\":\"FALSE\",\"26\":\"NA\",\"27\":\"743.5622\",\"28\":\"1\",\"29\":\"1\",\"30\":\"51.66667\",\"31\":\"775\",\"_rn_\":\"2243\"},{\"1\":\"2579\",\"2\":\"2579\",\"3\":\"2\",\"4\":\"1\",\"5\":\"620\",\"6\":\"90073.63\",\"7\":\"706.0949\",\"8\":\"201.1234\",\"9\":\"16134.85\",\"10\":\"25\",\"11\":\"0\",\"12\":\"51.15214\",\"13\":\"782.8461\",\"14\":\"2577\",\"15\":\"743.3547\",\"16\":\"1\",\"17\":\"475290.8\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"250\",\"23\":\"FTMS + p ESI d Full ms2 743.35@hcd25.00 [51.67-775.00]\",\"24\":\"controllerType=0 controllerNumber=1 scan=2579\",\"25\":\"FALSE\",\"26\":\"NA\",\"27\":\"743.3547\",\"28\":\"1\",\"29\":\"1\",\"30\":\"51.66667\",\"31\":\"775\",\"_rn_\":\"2579\"},{\"1\":\"4293\",\"2\":\"4293\",\"3\":\"2\",\"4\":\"1\",\"5\":\"718\",\"6\":\"108719.88\",\"7\":\"1171.1744\",\"8\":\"201.1235\",\"9\":\"31180.63\",\"10\":\"25\",\"11\":\"0\",\"12\":\"51.15223\",\"13\":\"782.8475\",\"14\":\"4292\",\"15\":\"743.5634\",\"16\":\"1\",\"17\":\"234226.0\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"250\",\"23\":\"FTMS + p ESI d Full ms2 743.56@hcd25.00 [51.67-775.00]\",\"24\":\"controllerType=0 controllerNumber=1 scan=4293\",\"25\":\"FALSE\",\"26\":\"NA\",\"27\":\"743.5634\",\"28\":\"1\",\"29\":\"1\",\"30\":\"51.66667\",\"31\":\"775\",\"_rn_\":\"4293\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nAnother consideration for the experimentalist (and good exam question ðŸ˜› ) is how you could obtain more scans of this 743.5622 *m/z* target ion. There's multiple ways (the most obvious is to run in targeted mode where you only fragment parent molecules within a tight range around 743.5622 *m/z*), but if you need untargetted mode you can mess with duty cycles, or adjust your chromatography to increase the elution peak width of the target compound; sometimes 5min chromatography isn't the best chromatography.\n\n\n\n\n\n\n\nAnd we can see it is indeed an mzXML file.\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(readLines(peaks_file_path, n=10), sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<mzXML xmlns=\"http://sashimi.sourceforge.net/schema_revision/mzXML_3.2\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://sashimi.sourceforge.net/schema_revision/mzXML_3.2 http://sashimi.sourceforge.net/schema_revision/mzXML_3.2/mzXML_idx_3.2.xsd\">\n  <msRun scanCount=\"4399\" startTime=\"PT0.0673789S\" endTime=\"PT1200.11S\">\n    <parentFile fileName=\"file:///C:\\Users\\chase\\Downloads\\LCMSNORTHWESTERN\\Example\\Input_Folder/20170719_mwm1013_metabologenomics_actinolunaC182x100_B022.raw\"\n                fileType=\"RAWData\"\n                fileSha1=\"b739a75b1c680e889940f7b35fe9ef07ee5bcd62\"/>\n    <msInstrument msInstrumentID=\"1\">\n      <msManufacturer category=\"msManufacturer\" value=\"Thermo Scientific\"/>\n```\n\n\n:::\n:::\n\n\nI really like mzR. Under the hood is a lot of fast C/C++ code, and it is possible to lazily load the data from mzML files.\n\n\nHere we will tell mzR to lazily open the mass spec file we just downloaded. We can see it returns a handle to the file, which contains 4399 \"scans\". A scan being a mass spectrum. \n\n::: {.cell}\n\n```{.r .cell-code}\nmsfile_handle <- mzR::openMSfile(peaks_file_path)\nmsfile_handle\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMass Spectrometry file handle.\nFilename:  B022.mzXML \nNumber of scans:  4399 \n```\n\n\n:::\n:::\n\n\n\nmzR uses [S3](https://adv-r.hadley.nz/s3.html) object oriented programming which is difficult if you are only used to R's usual functional programming style. You don't have to worry much about it because most of what I'll show is functional, but if you do care there are a number of object based methods you can use.\n\nWe can see how mzR \"opened/parsed\" the file, here using C++ code from ProteoWizard.\n\n::: {.cell}\n\n```{.r .cell-code}\nmsfile_handle@backend\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC++ object <0x5647cafc1c70> of class 'Pwiz' <0x5647c25b4670>\n```\n\n\n:::\n:::\n\n\nThese are the methods available to be run on files parsed with the Pwiz object (not all will be applicable to all types of MS data).\n\n::: {.cell}\n\n```{.r .cell-code}\nmzR:::Pwiz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC++ class 'Pwiz' <0x5647c25b4670>\nConstructors:\n    Pwiz()\n        docstring : Initialises a new Rccp pwiz object.\n\nFields: No public fields exposed by this class\n\nMethods: \n     void close()  \n           docstring : Close the connection to a mass spec file (mzXML, mzData, etc.).\n     void copyWriteMSfile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Rcpp::DataFrame_Impl<Rcpp::PreserveStorage>, Rcpp::List, bool, Rcpp::List)  \n           docstring : Copy general content from the originalting MS file, add the provided spectrum list and write the data to a new mzML file.\n     Rcpp::Matrix<14, Rcpp::PreserveStorage> get3DMap(std::vector<int, std::allocator<int> >, double, double, double)  \n           docstring : Reads all scans and returns them as a matrix.\n     Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> getAllChromatogramHeaderInfo()  \n           docstring : Returns a data.frame with the header for all chromatograms\n     Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> getAllScanHeaderInfo()  \n           docstring : Reads the header info for all mass spectra.\n     Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> getChromatogramHeaderInfo(Rcpp::IntegerVector)  \n           docstring : Returns a data.frame with the chromatogram header information\n     Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> getChromatogramsInfo(int)  \n           docstring : Reads the chromatogram information.\n     std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getFilename()  \n           docstring : Returns the mass spec filename.\n     Rcpp::List getInstrumentInfo()  \n           docstring : Reads the instrument information from a pwiz object\n     int getLastChrom()  const \n           docstring : Returns the index of the last chromatogram.\n     int getLastScan()  const \n           docstring : Returns the last scan (not necessarily the number of scans because of missing scans).\n     Rcpp::List getPeakList(Rcpp::IntegerVector)  \n           docstring : Performs a non-sequential parsing operation on an indexed mzXML file to obtain the peak list for a numbered scan.\n     std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getRunStartTimeStamp()  \n           docstring : Returns the start time stamp of the MS run.\n     Rcpp::DataFrame_Impl<Rcpp::PreserveStorage> getScanHeaderInfo(Rcpp::IntegerVector)  \n           docstring : Reads the header info for the specified scan(s). Supports also to extract scan header infos for multiple scans.\n     void open(Rcpp::CharacterVector)  \n           docstring : Opens a mass spec file (mzXML, mzData, etc.) and creates a pwiz object\n     void writeSpectrumList(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, Rcpp::DataFrame_Impl<Rcpp::PreserveStorage>, Rcpp::List, bool, Rcpp::List)  \n           docstring : Write the spectrum list to an mzML file.\n```\n\n\n:::\n:::\n\n\nOne of the most powerful {{mzR}} functions is `header()` which provides summarizing information about each scan in the dataset. Each scan is numbered sequentially (seqNum/acquisitionNum) and the msLevel (MS == 1; MS^2^ == 2, MS^3^ == 3, etc.)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_data <- header(msfile_handle)\nhead(summary_data)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"seqNum\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"acquisitionNum\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"msLevel\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"polarity\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"peaksCount\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"totIonCurrent\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"retentionTime\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakMZ\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakIntensity\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"collisionEnergy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ionisationEnergy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lowMZ\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"highMZ\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorScanNum\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorMZ\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorCharge\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorIntensity\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mergedScan\"],\"name\":[18],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultScanNum\"],\"name\":[19],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultStartScanNum\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultEndScanNum\"],\"name\":[21],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"injectionTime\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"filterString\"],\"name\":[23],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"spectrumId\"],\"name\":[24],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"centroided\"],\"name\":[25],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"ionMobilityDriftTime\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowTargetMZ\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowLowerOffset\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowUpperOffset\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowLowerLimit\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowUpperLimit\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"320\",\"6\":\"7179157\",\"7\":\"0.0673789\",\"8\":\"217.1074\",\"9\":\"266403.1\",\"10\":\"NA\",\"11\":\"0\",\"12\":\"150.0266\",\"13\":\"1892.051\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=1\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"NA\",\"29\":\"NA\",\"30\":\"150.0266\",\"31\":\"1892.051\",\"_rn_\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"673\",\"6\":\"6511908\",\"7\":\"0.4336310\",\"8\":\"301.1406\",\"9\":\"245597.2\",\"10\":\"NA\",\"11\":\"0\",\"12\":\"150.0265\",\"13\":\"1980.235\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=2\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"NA\",\"29\":\"NA\",\"30\":\"150.0265\",\"31\":\"1980.235\",\"_rn_\":\"2\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"1\",\"4\":\"1\",\"5\":\"617\",\"6\":\"7172014\",\"7\":\"0.7546260\",\"8\":\"217.1071\",\"9\":\"208030.5\",\"10\":\"NA\",\"11\":\"0\",\"12\":\"150.0265\",\"13\":\"1954.778\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=3\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"NA\",\"29\":\"NA\",\"30\":\"150.0265\",\"31\":\"1954.778\",\"_rn_\":\"3\"},{\"1\":\"4\",\"2\":\"4\",\"3\":\"1\",\"4\":\"1\",\"5\":\"652\",\"6\":\"8089850\",\"7\":\"1.0220100\",\"8\":\"301.1406\",\"9\":\"245887.3\",\"10\":\"NA\",\"11\":\"0\",\"12\":\"150.0265\",\"13\":\"1958.846\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=4\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"NA\",\"29\":\"NA\",\"30\":\"150.0265\",\"31\":\"1958.846\",\"_rn_\":\"4\"},{\"1\":\"5\",\"2\":\"5\",\"3\":\"1\",\"4\":\"1\",\"5\":\"565\",\"6\":\"7538651\",\"7\":\"1.2895000\",\"8\":\"301.1407\",\"9\":\"266377.8\",\"10\":\"NA\",\"11\":\"0\",\"12\":\"150.0265\",\"13\":\"1985.422\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=5\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"NA\",\"29\":\"NA\",\"30\":\"150.0265\",\"31\":\"1985.422\",\"_rn_\":\"5\"},{\"1\":\"6\",\"2\":\"6\",\"3\":\"1\",\"4\":\"1\",\"5\":\"748\",\"6\":\"10536195\",\"7\":\"1.5568800\",\"8\":\"301.1405\",\"9\":\"344449.1\",\"10\":\"NA\",\"11\":\"0\",\"12\":\"150.0265\",\"13\":\"1973.114\",\"14\":\"NA\",\"15\":\"NA\",\"16\":\"NA\",\"17\":\"NA\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=6\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"NA\",\"29\":\"NA\",\"30\":\"150.0265\",\"31\":\"1973.114\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nSo, now we can do things like filtering for only positive mode MS^2^ scans.\n\n::: {.cell}\n\n```{.r .cell-code}\nfiltered_df <- summary_data[summary_data$polarity == 1, ][summary_data$msLevel == 2, ]\nhead(filtered_df)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"seqNum\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"acquisitionNum\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"msLevel\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"polarity\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"peaksCount\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"totIonCurrent\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"retentionTime\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakMZ\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"basePeakIntensity\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"collisionEnergy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ionisationEnergy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lowMZ\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"highMZ\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorScanNum\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorMZ\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precursorCharge\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"precursorIntensity\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mergedScan\"],\"name\":[18],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultScanNum\"],\"name\":[19],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultStartScanNum\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mergedResultEndScanNum\"],\"name\":[21],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"injectionTime\"],\"name\":[22],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"filterString\"],\"name\":[23],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"spectrumId\"],\"name\":[24],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"centroided\"],\"name\":[25],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"ionMobilityDriftTime\"],\"name\":[26],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowTargetMZ\"],\"name\":[27],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowLowerOffset\"],\"name\":[28],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"isolationWindowUpperOffset\"],\"name\":[29],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowLowerLimit\"],\"name\":[30],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"scanWindowUpperLimit\"],\"name\":[31],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"8\",\"2\":\"8\",\"3\":\"2\",\"4\":\"1\",\"5\":\"49\",\"6\":\"96117.32\",\"7\":\"2.14157\",\"8\":\"301.14122\",\"9\":\"48492.03\",\"10\":\"25\",\"11\":\"0\",\"12\":\"50.16715\",\"13\":\"319.0712\",\"14\":\"7\",\"15\":\"301.1405\",\"16\":\"1\",\"17\":\"411267.5\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=8\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"1\",\"29\":\"1\",\"30\":\"50.16715\",\"31\":\"319.0712\",\"_rn_\":\"8\"},{\"1\":\"29\",\"2\":\"29\",\"3\":\"2\",\"4\":\"1\",\"5\":\"65\",\"6\":\"287236.06\",\"7\":\"7.81044\",\"8\":\"217.10517\",\"9\":\"163613.17\",\"10\":\"25\",\"11\":\"0\",\"12\":\"50.93454\",\"13\":\"218.1087\",\"14\":\"28\",\"15\":\"217.1069\",\"16\":\"1\",\"17\":\"238682.0\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=29\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"1\",\"29\":\"1\",\"30\":\"50.93454\",\"31\":\"218.1087\",\"_rn_\":\"29\"},{\"1\":\"41\",\"2\":\"41\",\"3\":\"2\",\"4\":\"1\",\"5\":\"100\",\"6\":\"1545867.50\",\"7\":\"11.12990\",\"8\":\"113.96369\",\"9\":\"626562.44\",\"10\":\"25\",\"11\":\"0\",\"12\":\"50.89707\",\"13\":\"156.1382\",\"14\":\"40\",\"15\":\"154.9900\",\"16\":\"0\",\"17\":\"89905.9\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=41\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"1\",\"29\":\"1\",\"30\":\"50.89707\",\"31\":\"156.1382\",\"_rn_\":\"41\"},{\"1\":\"81\",\"2\":\"81\",\"3\":\"2\",\"4\":\"1\",\"5\":\"104\",\"6\":\"475490.09\",\"7\":\"21.90190\",\"8\":\"84.95964\",\"9\":\"102565.70\",\"10\":\"25\",\"11\":\"0\",\"12\":\"51.17863\",\"13\":\"168.1384\",\"14\":\"80\",\"15\":\"167.0125\",\"16\":\"1\",\"17\":\"263485.1\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=81\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"1\",\"29\":\"1\",\"30\":\"51.17863\",\"31\":\"168.1384\",\"_rn_\":\"81\"},{\"1\":\"84\",\"2\":\"84\",\"3\":\"2\",\"4\":\"1\",\"5\":\"55\",\"6\":\"95975.35\",\"7\":\"22.66680\",\"8\":\"301.14101\",\"9\":\"39457.93\",\"10\":\"25\",\"11\":\"0\",\"12\":\"51.32985\",\"13\":\"322.4011\",\"14\":\"83\",\"15\":\"301.1404\",\"16\":\"1\",\"17\":\"142265.4\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=84\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"1\",\"29\":\"1\",\"30\":\"51.32985\",\"31\":\"322.4011\",\"_rn_\":\"84\"},{\"1\":\"100\",\"2\":\"100\",\"3\":\"2\",\"4\":\"1\",\"5\":\"46\",\"6\":\"99555.92\",\"7\":\"27.00660\",\"8\":\"299.11010\",\"9\":\"58150.55\",\"10\":\"25\",\"11\":\"0\",\"12\":\"50.60672\",\"13\":\"305.5677\",\"14\":\"99\",\"15\":\"299.1095\",\"16\":\"1\",\"17\":\"280681.7\",\"18\":\"NA\",\"19\":\"NA\",\"20\":\"NA\",\"21\":\"NA\",\"22\":\"0\",\"23\":\"NA\",\"24\":\"controllerType=0 controllerNumber=1 scan=100\",\"25\":\"TRUE\",\"26\":\"NA\",\"27\":\"NA\",\"28\":\"1\",\"29\":\"1\",\"30\":\"50.60672\",\"31\":\"305.5677\",\"_rn_\":\"100\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\nThe next useful function retrieves the actual mass spectra. It will load every scan in the file as a two-column separate matrix. For each matrix the first column represents m/z and the second column is intensity.\n\nLet's look at the first five lines of the twenty-second scan/mass spectrum.\n\n::: {.cell}\n\n```{.r .cell-code}\n# note: mzR::peaks() and mzR::spectra() are interchangeable\nsingle_spectrum <- mzR::peaks(msfile_handle, scans=4)\nhead(single_spectrum, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           mz intensity\n[1,] 150.0265 32913.336\n[2,] 151.0238  2110.815\n[3,] 151.0272  3636.793\n[4,] 152.0564  4872.385\n[5,] 153.0907  2387.040\n```\n\n\n:::\n:::\n\n\nWe can load just the filtered MS^2^\n\n::: {.cell}\n\n```{.r .cell-code}\npositive_ms2_header <- summary_data[summary_data$polarity == 1, ][summary_data$msLevel == 2, ]\npositive_ms2_scan_index <- positive_ms2_header$seqNum\npositive_ms2_spectra <- mzR::peaks(msfile_handle, positive_ms2_scan_index)\n```\n:::\n\n\nCheck that we only grabbed the positive, MS^2^ spectra\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(positive_ms2_spectra) == nrow(positive_ms2_header)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_scan <- 2243\nspectrum_to_plot <- mzR::peaks(msfile_handle, selected_scan)\nspectrum_df <- as.data.frame(spectrum_to_plot)\ncolnames(spectrum_df) <- c(\"m/z\", \"intensity\")\n```\n:::\n\n\n\n\nLet's write a couple helper functions first.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fancy_scientific creates scientific notation text\nfancy_scientific <- function(l) {\n  # \"fancy_scientific\" was copied from comment from Brian Diggs posted at https://groups.google.com/forum/#!topic/ggplot2/a_xhMoQyxZ4\n  # turn in to character string in scientific notation\n  l <- format(l, scientific = TRUE)\n  # quote the part before the exponent to keep all the digits\n  l <- gsub(\"^(.*)e\", \"'\\\\1'e\", l)\n  # turn the 'e+' into plotmath format\n  l <- gsub(\"e\", \"%*%10^\", l)\n  # return this as an expression\n  parse(text=l)\n}\n\n# gets top N intensity peaks\ntopn <- function(x, n=10) { x[order(x[, 2], decreasing = ifelse(all(x[, 2] < 0), F, T))[1:n], ] }\n\n\nplot_peaks <- function(df1, plot_title){\n  ggplot() +\n  geom_bar(data = df1, aes(x = `m/z`, y = `intensity`), stat = \"identity\", width = 1) +\n  geom_text(data=topn(df1), aes(x = `m/z`, y = `intensity` * 1.05, label = as.numeric(sprintf('%.4f', `m/z`))), size = 3) +\n  scale_y_continuous(name=\"Intensity\", labels = fancy_scientific) +\n  xlab(label = expression(italic(\"m/z\"))) +\n  ggtitle(plot_title) +\n  theme(plot.title = element_text(hjust = 0.5))\n}\n\nplot_mirror <- function(df1, df2, plot_title, df1_name, df2_name){\n  df1$`intensity` <- df1$`intensity` / max(df1$`intensity`) * 100 \n  df2$`intensity` <- df2$`intensity` / max(df2$`intensity`) * 100 * -1\n  \n  df3 <- rbind.data.frame(\n    cbind.data.frame(df1, spectrum=df1_name),\n    cbind.data.frame(df2, spectrum=df2_name)\n  )\n  # ensure the input spectrum (positive spectrum) appears as the top label in the legend\n  df3$spectrum <- factor(df3$spectrum, levels=c(df1_name, df2_name))\n  \n  ggplot() +\n    geom_bar(data = df3, aes(x = `m/z`, y = `intensity`, fill=`spectrum`), stat = \"identity\", width = 2) +\n    scale_fill_manual(\"legend\", values = c( \"blue\",  \"red\")) +\n    # write the m/z labels to 4 decimal places\n    geom_text(data=topn(df1), aes(x = `m/z`, y = `intensity` * 1.05, label = as.numeric(sprintf('%.4f', `m/z`))), size = 3) +\n    geom_text(data=topn(df2), aes(x = `m/z`, y = `intensity` * 1.05, label = as.numeric(sprintf('%.4f', `m/z`))), size = 3) +\n    scale_y_continuous(name=\"Intensity\", labels = fancy_scientific) +\n    xlab(label = expression(italic(\"m/z\"))) +\n    ggtitle(plot_title) +\n    theme(plot.title = element_text(hjust = 0.5))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninput_file_name <- basename(mzR::fileName(msfile_handle))\nplot_title <- paste0(\"File: \", input_file_name, \"; scan: \", selected_scan)\n\nplot_peaks(spectrum_df, plot_title)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `position_stack()` requires non-overlapping x intervals\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntemporary_directory <- tempdir()\n\n# 22.3 MB\ngnps_spectrum_df <- read.delim(\"https://metabolomics-usi.gnps2.org/csv/?usi1=mzspec%3AGNPS%3AGNPS-LIBRARY%3Aaccession%3ACCMSLIB00000072054\", sep=\",\")\ngnps_spectrum_df <- as.data.frame(gnps_spectrum_df)\ncolnames(gnps_spectrum_df) <- c(\"m/z\", \"intensity\")\n\nplot_title <- \"GNPS Library: CCMSLIB00000072054\"\n\nplot_peaks(gnps_spectrum_df, plot_title)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `position_stack()` requires non-overlapping x intervals\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_mirror(\n  df1 = spectrum_df,\n  df2 = gnps_spectrum_df,\n  df1_name = \"input\",\n  df2_name = \"CCMSLIB00000072054\",\n  plot_title = \"Comparison to GNPS Reference\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: `position_stack()` requires non-overlapping x intervals\n`position_stack()` requires non-overlapping x intervals\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}